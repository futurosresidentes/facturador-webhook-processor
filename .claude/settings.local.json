{
  "permissions": {
    "allow": [
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: Implementar sistema de cachÃ© de ciudades para World Office\n\nNUEVO ARCHIVO: worldOfficeCityCache.js\n- CachÃ© en memoria de ~1100 ciudades de Colombia\n- Consulta automÃ¡tica de API de WO al iniciar servidor\n- Refresco automÃ¡tico cada 24 horas (configurable)\n- BÃºsqueda normalizada con fuzzy matching:\n  * Elimina acentos (MedellÃ­n = MEDELLIN)\n  * Ignora mayÃºsculas/minÃºsculas\n  * Normaliza espacios mÃºltiples\n  * BÃºsqueda exacta primero, luego parcial\n\nFUNCIONES PRINCIPALES:\n- findCityByName(cityName): Busca ciudad por nombre\n- findCityById(cityId): Obtiene ciudad por ID\n- getCacheInfo(): Estado del cachÃ©\n- refreshCache(force): ActualizaciÃ³n manual\n- normalizeString(): NormalizaciÃ³n de texto\n\nINTEGRACIÃ“N EN worldOfficeService.js:\n- findOrUpdateCustomer() ahora acepta city y address\n- Convierte automÃ¡ticamente nombre de ciudad â†’ cityId\n- Incluye cityId en payload de creaciÃ³n/actualizaciÃ³n\n- Exporta funciones del cachÃ© para uso directo\n\nPROBLEMA RESUELTO:\n- ePayco envÃ­a x_customer_city como texto (ej: \"MedellÃ­n\")\n- World Office requiere cityId numÃ©rico\n- Sin cachÃ© = consulta API por cada webhook (lento)\n- Con cachÃ© = bÃºsqueda en memoria < 1ms\n\nDOCUMENTACIÃ“N:\n- docs/CACHE_CIUDADES_WO.md con guÃ­a completa\n- Ejemplos de uso\n- API reference\n- Troubleshooting\n\nPERFORMANCE:\n- InicializaciÃ³n: ~1-2 segundos (una vez)\n- BÃºsquedas: < 1ms (memoria)\n- Memoria: < 1MB para 1100 ciudades\n- TTL: 24 horas\n\nNOTA:\n- Requiere WORLDOFFICE_API_URL y WORLDOFFICE_API_TOKEN en .env\n- Si API no responde, cachÃ© queda vacÃ­o pero no falla el servidor\n- Ciudades no encontradas retornan null (loguea warning)\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")"
    ],
    "deny": [],
    "ask": []
  }
}
